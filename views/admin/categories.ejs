<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Categories - SUBTLETY</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
  <link rel="stylesheet" href="/styles/admin/dashboard.css">
  <link rel="stylesheet" href="/styles/admin/categories.css">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.11.2/toastify.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <style>
    .valid-feedback,
    .invalid-feedback {
      display: none;
    }

    .is-valid~.valid-feedback,
    .is-invalid~.invalid-feedback {
      display: block;
    }
  </style>
</head>

<body class="bg-light text-dark">
  <div class="d-flex" id="wrapper">
    <!-- Sidebar -->
    <div class="sidebar" id="sidebar">
      <div class="sidebar-header text-center mt-4 mb-3">
        <h3 class="text-dark">Admin Panel</h3>
      </div>
      <ul class="list-unstyled components">
        <li><a href="/admin/dashboard" class="sidebar-item "><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
        <li><a href="/admin/users" class="sidebar-item"><i class="fas fa-users"></i> Users</a></li>
        <li><a href="/admin/products" class="sidebar-item"><i class="fas fa-box"></i> Products</a></li>
        <li><a href="/admin/categories" class="sidebar-item active"><i class="fas fa-th"></i> Category</a></li>
        <li><a href="/admin/orderList" class="sidebar-item"><i class="fas fa-list"></i> Order List</a></li>
        <li><a href="/admin/offer" class="sidebar-item"><i class="fas fa-tags"></i> Offers</a></li>
        <li><a href="/admin/coupons" class="sidebar-item"><i class="fas fa-ticket-alt"></i> Coupons</a></li>
        <li><a href="/admin/salesReport" class="sidebar-item "><i class="fas fa-chart-line"></i> Sales Report</a></li>
        <li><a href="#settings" class="sidebar-item"><i class="fas fa-cog"></i> Settings</a></li>
        <li>
          <form action="/admin/logout" method="POST" style="display: inline;">
            <button type="submit" class="sidebar-item bg-transparent border-0">
              <i class="fas fa-sign-out-alt"></i> Logout
            </button>
          </form>
        </li>

      </ul>
    </div>

    <!-- Page Content -->
    <div id="page-content-wrapper">
      <!-- Navbar -->
      <nav class="navbar navbar-expand-lg navbar-light bg-light mb-3">
        <button class="btn btn-primary btn-sm" id="menuToggle">
          <i class="fas fa-bars"></i>
        </button>
        <div class="navbar-brand d-flex align-items-center ml-auto">
          <img src="/images/IMG_0986[1].JPG" alt="Admin Profile" class="profile-photo">
          <span class="navbar-text text-dark ml-2">Nandalal</span>
        </div>
      </nav>

      <div class="container-fluid">
        <h2 class="mb-4">Categories</h2>

        <div class="d-flex justify-content-between mb-3">
          <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#addCategoryModal">
            Add New Category
          </button>

          <!-- Search Bar -->
          <form class="form-inline">
            <input class="form-control mr-2" type="search" placeholder="Search categories..." aria-label="Search">
            <button class="btn btn-primary" type="submit">Search</button>
          </form>
        </div>

        <div class="modal fade" id="addCategoryModal" tabindex="-1" role="dialog" aria-labelledby="addCategoryModalLabel" aria-hidden="true">
          <div class="modal-dialog modal-md" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="addCategoryModalLabel">Add New Category</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
              <form action="/admin/categories/add" method="POST" enctype="multipart/form-data" id="addCategoryForm" onsubmit="return validateCategoryForm(this)">
                <div class="modal-body">
                  <div class="form-group">
                    <label for="name">Category Name</label>
                    <input type="text" id="name" name="name" class="form-control" required pattern="^[a-zA-Z]{4,}$">
                    <div class="valid-feedback">Looks good!</div>
                    <div class="invalid-feedback">Category name must be at least 4 characters long and contain only letters.</div>
                  </div>
                  <div class="form-group">
                    <label for="image">Category Image</label>
                    <input type="file" id="image" name="image" class="form-control" accept="image/*" required>
                    <div id="imagePreview" style="display:none; margin-top: 10px;">
                      <img id="cropImage" style="max-width: 100%;">
                    </div>
                    <div id="error-message" style="color: red; display: none; margin-top: 10px;"></div>
                  </div>
                  <input type="hidden" id="isListed" name="isListed" value="true"> <!-- Default value set to true -->
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                  <button type="submit" class="btn btn-primary">Add Category</button>
                </div>
              </form>
            </div>
          </div>
        </div>

        <table class="table table-striped">
          <thead>
            <tr>
              <th style="width: 10%;">#</th>
              <th style="width: 40%;">Name</th>
              <th style="width: 30%;">Image</th>
              <th style="width: 20%;">Actions</th>
            </tr>
          </thead>
          <tbody>
            <% categories.forEach((category, index)=> { %>
            <tr>
              <td>
                <%= (currentPage - 1) * limit + (index + 1) %>
              </td>
              <td>
                <%= category.name %>
              </td>
              <td>
                <% if (category.image) { %>
                <img src="/<%= category.image.split('/').pop() %>" alt="Category Image" class="product-image" style="max-width: 50px; max-height: 50px;">
                <% } else { %>
                No image
                <% } %>
              </td>
              <td>
                <!-- Edit button in the table -->
                <button class="btn btn-warning" data-toggle="modal" data-target="#editCategoryModal<%= category._id %>">
                  Edit
                </button>

                <!-- Edit Category Modal -->
                <div class="modal fade" id="editCategoryModal<%= category._id %>" tabindex="-1" role="dialog" aria-labelledby="editCategoryModalLabel" aria-hidden="true">
                  <div class="modal-dialog modal-md" role="document">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h5 class="modal-title" id="editCategoryModalLabel">Edit Category</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                          <span aria-hidden="true">&times;</span>
                        </button>
                      </div>
                      <form action="/admin/categories/edit/<%= category._id %>" method="POST" enctype="multipart/form-data" class="editCategoryForm" onsubmit="return validateCategoryForm(this)">
                        <div class="modal-body">
                          <div class="form-group">
                            <label for="name">Category Name</label>
                            <input type="text" id="name" name="name" class="form-control" value="<%= category.name %>" required pattern="^[a-zA-Z]{4,}$">
                            <div class="valid-feedback">Looks good!</div>
                            <div class="invalid-feedback">Category name must be at least 4 characters long and contain only letters.</div>
                          </div>
                          <div class="form-group">
                            <label for="image">Category Image</label>
                            <input type="file" id="imageEdit<%= category._id %>" name="image" class="form-control" accept="image/*">
                            <div id="imagePreviewEdit<%= category._id %>" style="display:none; margin-top: 10px;">
                              <img id="cropImageEdit<%= category._id %>" style="max-width: 100%;">
                            </div>
                            <div id="error-messageEdit<%= category._id %>" style="color: red; display: none; margin-top: 10px;"></div>
                          </div>
                          <% if (category.image) { %>
                          <div class="current-image mt-2">
                            <h6>Current Image:</h6>
                            <img src="/<%= category.image.split('/').pop() %>" alt="Current Image" class="product-image" style="max-width: 100%;">
                          </div>
                          <% } %>
                          <input type="hidden" name="isListed" value="<%= category.isListed %>">
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                          <button type="submit" class="btn btn-primary">Update Category</button>
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
                <button class="btn <%= category.isListed ? 'btn-secondary' : 'btn-primary' %>" onclick="toggleCategoryStatus('<%= category._id %>', '<%= category.isListed ? `unlist` : `relist` %>')">
                  <%= category.isListed ? 'Unlist' : 'Relist' %>
                </button>
              </td>
            </tr>
            <% }) %>
          </tbody>
        </table>
        <!-- Pagination Section -->
        <div class="pagination d-flex justify-content-center mb-4 pt-2">
          <button class="btn btn-secondary mx-1" <%=currentPage===1 ? 'disabled' : '' %> onclick="window.location.href='?page=<%= currentPage - 1 %>'">
            <i class="fas fa-chevron-left"></i>
          </button>

          <span class="mx-2"> <strong>
              <%= currentPage %>
            </strong> </span>

          <button class="btn btn-secondary mx-1" <%=currentPage===totalPages ? 'disabled' : '' %> onclick="window.location.href='?page=<%= currentPage + 1 %>'">
            <i class="fas fa-chevron-right"></i>
          </button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.11.2/toastify.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    // Sidebar toggle functionality
    document.getElementById('menuToggle').addEventListener('click', function() {
      document.getElementById('sidebar').classList.toggle('active');
      document.getElementById('page-content-wrapper').classList.toggle('toggled');
    });

    // Function to handle toggling category status
    function toggleCategoryStatus(id, action) {
      const message = action === 'unlist' ? 'unlist' : 'relist';
      Swal.fire({
        title: 'Are you sure?',
        text: `Do you want to ${message} this category?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes',
        cancelButtonText: 'No'
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/admin/categories/toggle-status/${id}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
            })
            .then(response => {
              if (response.ok) {
                location.reload(); // Refresh the page on success
              } else {
                Swal.fire('Error', 'Failed to update category status', 'error');
              }
            })
            .catch(err => {
              console.error(err);
              Swal.fire('Error', 'An error occurred', 'error');
            });
        }
      });
    }

    //image preview, crop
    let cropper;
    const imageInput = document.getElementById('image');
    const imagePreview = document.getElementById('cropImage');

    imageInput.addEventListener('change', function(event) {
      const files = event.target.files;
      if (files && files.length > 0) {
        const reader = new FileReader();
        reader.onload = function(e) {
          imagePreview.src = e.target.result;
          imagePreview.parentNode.style.display = 'block';
          if (cropper) cropper.destroy();
          cropper = new Cropper(imagePreview, {
            aspectRatio: 1,
            viewMode: 2,
            autoCropArea: 1,
            crop(event) {
              // This function can be used to handle crop events if needed
            }
          });
        };
        reader.readAsDataURL(files[0]);
      }
    });

    // Handle form submission for adding new category
    const addForm = document.getElementById('addCategoryForm');
    addForm.addEventListener('submit', function(event) {
      event.preventDefault(); // Prevent the default form submission

      if (cropper) {
        cropper.getCroppedCanvas().toBlob((blob) => {
          if (blob) {
            const formData = new FormData(addForm);
            formData.set('image', blob, 'cropped.png'); // Add the cropped image

            // Submit the form with the cropped image
            fetch(addForm.action, {
                method: 'POST',
                body: formData
              })
              .then(response => response.json())
              .then(result => {


                if (result.status) {
                  $('#addCategoryModal').modal('hide'); // Close the modal
                  localStorage.setItem('categoryAdded', 'true');
                  window.location.href = '/admin/categories'; // Redirect after success
                } else {
                  if (!result.status) {
                    Toastify({
                      text: "Category already exists!",
                      duration: 3000,
                      close: true,
                      gravity: "top",
                      position: "center",
                      backgroundColor: "linear-gradient(to right, #ff4949, #ee2020)",
                    }).showToast();
                  } else {
                    console.error('Error adding category:', response.statusText);
                  }
                }
              })
              .catch(error => console.error('Fetch error:', error));
          }
        }, 'image/png');
      }
    });

    // Preview selected image in the edit modal
    document.querySelectorAll('input[type="file"]').forEach(input => {
      input.addEventListener('change', function(event) {
        const files = event.target.files;
        const categoryId = event.target.id.replace('image', ''); // Extract category ID

        if (files && files.length > 0) {
          const reader = new FileReader();
          reader.onload = function(e) {
            // Update the current image src to the new image
            const currentImage = document.getElementById(`currentImage${categoryId}`);
            currentImage.src = e.target.result; // Change src to new image
          };
          reader.readAsDataURL(files[0]);
        }
      });
    });
  </script>

  <script>
    let cropperEdit;

    // Image selection and cropping logic
    document.querySelectorAll('input[type="file"]').forEach(input => {
      input.addEventListener('change', function(event) {
        const files = event.target.files;
        const categoryId = this.id.replace('imageEdit', ''); // Extract category ID
        const imagePreview = document.getElementById(`cropImageEdit${categoryId}`);

        if (files && files.length > 0) {
          const reader = new FileReader();
          reader.onload = function(e) {
            imagePreview.src = e.target.result;
            document.getElementById(`imagePreviewEdit${categoryId}`).style.display = 'block';

            if (cropperEdit) cropperEdit.destroy(); // Destroy previous instance
            cropperEdit = new Cropper(imagePreview, {
              aspectRatio: 1,
              viewMode: 2,
              autoCropArea: 1,
              crop(event) {
                // Handle crop events if needed
              }
            });
          };
          reader.readAsDataURL(files[0]);
        }
      });
    });

    // Handle form submission for edited category
    document.querySelectorAll('.editCategoryForm').forEach(form => {
      form.addEventListener('submit', function(event) {
        event.preventDefault(); // Prevent the default form submission

        const categoryId = this.action.split('/').pop(); // Get the category ID from the action URL

        if (cropperEdit) {
          cropperEdit.getCroppedCanvas().toBlob((blob) => {
            if (blob) {
              const formData = new FormData(form);
              formData.set('image', blob, 'cropped.png'); // Add the cropped image

              // Submit the form with the cropped image
              fetch(form.action, {
                  method: 'POST',
                  body: formData
                })
                .then(response => response.json())
                .then(result => {
                  if (result.status) {
                    $(`#editCategoryModal${categoryId}`).modal('hide'); // Close the modal
                    localStorage.setItem('categoryEdited', 'true');
                    window.location.href = '/admin/categories'; // Redirect after success
                  } else {
                    if (result.message === "Category name already exists") {
                      Toastify({
                        text: "Category name already exists!",
                        duration: 3000,
                        close: true,
                        gravity: "top",
                        position: "center",
                        backgroundColor: "linear-gradient(to right, #ff4949, #ee2020)",
                      }).showToast();
                    } else {
                      console.error('Error updating category:', result.message);
                      Toastify({
                        text: "Error updating category",
                        duration: 3000,
                        close: true,
                        gravity: "top",
                        position: "center",
                        backgroundColor: "linear-gradient(to right, #ff4949, #ee2020)",
                      }).showToast();
                    }
                  }
                })
                .catch(error => {
                  console.error('Fetch error:', error);
                  Toastify({
                    text: "An error occurred",
                    duration: 3000,
                    close: true,
                    gravity: "top",
                    position: "center",
                    backgroundColor: "linear-gradient(to right, #ff4949, #ee2020)",
                  }).showToast();
                });
            }
          }, 'image/png');
        } else {
          // If no new image, submit the form normally
          fetch(form.action, {
              method: 'POST',
              body: new FormData(form)
            })
            .then(response => response.json())
            .then(result => {
              if (result.status) {
                $(`#editCategoryModal${categoryId}`).modal('hide'); // Close the modal
                localStorage.setItem('categoryEdited', 'true');
                window.location.href = '/admin/categories'; // Redirect after success
              } else {
                if (result.message === "Category name already exists") {
                  Toastify({
                    text: "Category name already exists!",
                    duration: 3000,
                    close: true,
                    gravity: "top",
                    position: "center",
                    backgroundColor: "linear-gradient(to right, #ff4949, #ee2020)",
                  }).showToast();
                } else {
                  console.error('Error updating category:', result.message);
                  Toastify({
                    text: "Error updating category",
                    duration: 3000,
                    close: true,
                    gravity: "top",
                    position: "center",
                    backgroundColor: "linear-gradient(to right, #ff4949, #ee2020)",
                  }).showToast();
                }
              }
            })
            .catch(error => {
              console.error('Fetch error:', error);
              Toastify({
                text: "An error occurred",
                duration: 3000,
                close: true,
                gravity: "top",
                position: "center",
                backgroundColor: "linear-gradient(to right, #ff4949, #ee2020)",
              }).showToast();
            });
        }
      });
    });

    // Check for success messages on page load
    document.addEventListener('DOMContentLoaded', function() {
      if (localStorage.getItem('categoryAdded') === 'true') {
        Toastify({
          text: "New category added successfully!",
          duration: 3000,
          close: true,
          gravity: "top",
          position: "center",
          backgroundColor: "linear-gradient(to right, #00b09b, #96c93d)",
        }).showToast();
        localStorage.removeItem('categoryAdded');
      }
      if (localStorage.getItem('categoryEdited') === 'true') {
        Toastify({
          text: "Category updated successfully!",
          duration: 3000,
          close: true,
          gravity: "top",
          position: "center",
          backgroundColor: "linear-gradient(to right, #00b09b, #96c93d)",
        }).showToast();
        localStorage.removeItem('categoryEdited');
      }
    });

    // Function to validate category form
    function validateCategoryForm(form) {
      const nameInput = form.querySelector('input[name="name"]');
      const nameValue = nameInput.value.trim();
      const namePattern = /^[a-zA-Z]{4,}$/;

      if (namePattern.test(nameValue)) {
        nameInput.classList.add('is-valid');
        nameInput.classList.remove('is-invalid');
        return true;
      } else {
        nameInput.classList.add('is-invalid');
        nameInput.classList.remove('is-valid');
        return false;
      }
    }

    // Add real-time validation
    document.querySelectorAll('input[name="name"]').forEach(input => {
      input.addEventListener('input', function() {
        validateCategoryForm(this.form);
      });
    });
  </script>
  <script>
    document.getElementById('image').addEventListener('change', function(event) {
      const file = event.target.files[0];
      const errorMessage = document.getElementById('error-message');

      // Clear previous error message
      errorMessage.style.display = 'none';

      if (file) {
        const fileType = file.type;
        const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp']; // Add more types if needed

        // Check if the selected file is a valid image type
        if (!validImageTypes.includes(fileType)) {
          errorMessage.textContent = 'Please select a valid image file (jpg, png, gif, webp).';
          errorMessage.style.display = 'block';
          event.target.value = ''; // Clear the input
        } else {
          // If valid, you can show the image preview or perform other actions
          const reader = new FileReader();
          reader.onload = function(e) {
            document.getElementById('cropImage').src = e.target.result;
            document.getElementById('imagePreview').style.display = 'block';
          };
          reader.readAsDataURL(file);
        }
      }
    });
  </script>
  <script>
    <% categories.forEach(category => { %>
    document.getElementById('imageEdit<%= category._id %>').addEventListener('change', function(event) {
      const file = event.target.files[0];
      const errorMessage = document.getElementById('error-messageEdit<%= category._id %>');

      errorMessage.style.display = 'none';

      if (file) {
        const fileType = file.type;
        const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];

        if (!validImageTypes.includes(fileType)) {
          errorMessage.textContent = 'Please select a valid image file (jpg, png, gif, webp).';
          errorMessage.style.display = 'block';
          event.target.value = '';
        } else {
          const reader = new FileReader();
          reader.onload = function(e) {
            document.getElementById('cropImageEdit<%= category._id %>').src = e.target.result;
            document.getElementById('imagePreviewEdit<%= category._id %>').style.display = 'block';
          };
          reader.readAsDataURL(file);
        }
      }
    });
    <% }); %>
  </script>
</body>

</html>