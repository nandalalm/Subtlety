<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Order Details - SUBTLETY</title>
  <!-- Bootstrap CSS -->
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
  <!-- Google Fonts: Poppins -->
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" />
  <style>
    body {
      height: 100% !important;
      margin: 0;
      padding: 0;
      font-family: "Poppins", sans-serif;
      background-color: #f4f4f4 !important;
    }

    body>section>div>div:nth-child(1)>a {
      color: black;
    }

    body>section>div>div:nth-child(1)>a:hover {
      color: #9135ed;
    }

    .orderDetails {
      padding-top: 100px !important;
      padding-bottom: 100px !important;
      height: 100% !important;
      flex-grow: 1 !important;
    }

    .container {
      width: 90% !important;
    }

    .order-summary,
    .shipping-address {
      background-color: white;
      padding: 20px;
      border-radius: 5px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      height: 100%;
    }

    .product-details {
      margin-top: 20px;
      background-color: white;
      padding: 20px;
      border-radius: 5px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .product-image {
      width: 170px;
      height: 170px;
      object-fit: cover;
    }

    .cancel-order-btn,
    .return-order-btn {
      margin-top: 20px;
      background-color: #d3dae2 !important;
      color: #495057 !important;
      border-color: #6c757d;
    }

    .cancel-order-btn:hover:hover {
      background-color: #ff9e9e !important;
      color: #a52727 !important;
      border-color: #ff9e9e;
    }

    .return-order-btn:hover {
      background-color: #86cef7 !important;
      color: #0e527a !important;
      border-color: #86cef7;
    }

    .failed {
      opacity: 0.5;
      pointer-events: none;
    }

    .status-box {
      display: inline-block;
      padding: 5px 10px;
      border-radius: 5px;
      font-weight: bold;
    }

    .status-pending {
      background-color: #ffeeba;
      color: #856404;
    }

    .status-shipped {
      background-color: #b8daff;
      color: #004085;
    }

    .status-delivered {
      background-color: #c3e6cb;
      color: #155724;
    }

    .status-cancelled {
      background-color: #f8d7da;
      color: #721c24;
    }

    .status-completed {
      background-color: #d4edda;
      color: #155724;
    }

    .status-returned {
      background-color: #8b4513;
      color: #ffffff;
    }

    .failed {
      opacity: 0.5;
      pointer-events: none;
    }

    .status-failed {
      background-color: #ff9e9e;
      color: #a52727;
    }

    .status-successful {
      background-color: #d4edda;
      color: #155724;
    }

    .return-status-pending {
      background-color: #ffeeba;
      color: #856404;
    }

    .return-status-approved {
      background-color: #c3e6cb;
      color: #155724;
    }

    .return-status-rejected {
      background-color: #f8d7da;
      color: #721c24;
    }

    .return-message {
      margin-top: 5px;
      font-size: 0.9em;
    }

    .return-message-pending {
      color: #856404;
    }

    .return-message-approved {
      color: #155724;
    }

    .return-message-rejected {
      color: #721c24;
    }

    .validation-message {
      font-size: 0.9em;
      margin-top: 5px;
    }

    .is-invalid {
      border-color: #dc3545;
    }

    .is-valid {
      border-color: #28a745;
    }

    .invalid-feedback {
      color: #dc3545;
    }

    .valid-feedback {
      color: #28a745;
    }
  </style>
</head>

<body>
  <%- include('partials/navBar') %>

    <section class="orderDetails">
      <div class="container">
        <div>
          <a href="/user/home" class="text-decoration-none">Home</a> /
          <a href="/user/orders" class="text-decoration-none">My Orders</a> /
          <span style="color: #9135ed" class="text-decoration-none">Order Details</span>
        </div>
        <div class="d-flex justify-content-between align-items-center mb-3 mt-4">
          <h2 class="mb-0">Order Details</h2>
          <% if (order.orderStatus==='Completed' && order.items.some(item=>
            item.status === 'Delivered')) { %>
            <a href="/user/order/invoice/<%= order._id %>" class="btn btn-primary"><i class="fa-solid fa-file-pdf"></i>
              Download Invoice</a>
            <% } %>
              <% if (order.paymentStatus==='Failed' ) { %>
                <button class="btn btn-primary" id="retryPaymentBtn" data-order-id="<%= order._id %>">
                  Retry Payment
                </button>
                <% } %>
        </div>
        <div class="row">
          <!-- Left: Order Summary -->
          <div class="col-md-6">
            <div class="order-summary">
              <h4>Order Summary</h4>
              <p><strong>Order ID:</strong>
                <%= order._id %>
              </p>
              <p>
                <strong>Order Date:</strong>
                <%= new Date(order.orderDate).toLocaleDateString() %>
              </p>
              <p><strong>Payment Method:</strong>
                <%= order.paymentMethod %>
              </p>
              <p>
                <strong>Total Price:</strong> ₹<%= order.totalAmount.toFixed(2) %>
              </p>
              <div class="d-flex">
                <p class="order-status">
                  <strong>Order Status:</strong>
                  <span class="status-box status-<%= order.orderStatus.toLowerCase() %>">
                    <%= order.orderStatus %>
                  </span>
                </p>
                <p class="payment-status pl-3">
                  <strong>Payment Status:</strong>
                  <span class="status-box status-<%= order.paymentStatus.toLowerCase() %>">
                    <%= order.paymentStatus %>
                  </span>
                </p>
              </div>
            </div>
          </div>

          <!-- Right: Shipping Address -->
          <div class="col-md-6">
            <div class="shipping-address">
              <h4>Shipping Address</h4>
              <p>
                <strong>Name:</strong>
                <%= order.shippingAddress.fullname %>
              </p>
              <p>
                <strong>Address:</strong>
                <%= order.shippingAddress.address.split(',').slice(0, 4) %><br />
                  <%= order.shippingAddress.address.split(',').slice(4).join(', ')
                %>
              </p>
              <p>
                <strong>Pincode:</strong> <%= order.shippingAddress.pincode %>
              </p>
              <p><strong>Phone:</strong> <%= order.shippingAddress.phone %></p>
            </div>
          </div>
        </div>
        <div class="product-details">
          <% order.items.forEach(item => { %>
          <div
            class="row mb-3 <%= item.status === ' Cancelled' ? 'cancelled' : '' %>"
                    >
                    <div class="col-md-2">
                      <% if (item.productId && item.productId.images && item.productId.images.length> 0) { %>
                        <img src="/<%= item.productId.images[0].replace(/\\/g, '/') %>" alt="<%= item.productId.name %>"
                          class="product-image" />
                        <% } else { %>
                          <span>No image</span>
                          <% } %>
                    </div>
                    <div class="col-md-8">
                      <p><strong>Product Name:</strong>
                        <%= item.productId.name %>
                      </p>
                      <p>
                        <strong>Category:</strong>
                        <%= item.productId.category.name %>
                      </p>
                      <p>
                        <strong>Description:</strong>
                        <%= item.productId.description %>
                      </p>
                      <div class="d-flex justify-content-start align-items-center">
                        <p class="mb-0">
                          <strong>Price:</strong> ₹<%= item.price.toFixed(2) %>
                        </p>
                        <p class="mb-0 pl-3">
                          <strong>Quantity:</strong> x <%= item.quantity %>
                        </p>
                        <p class="mb-0 pl-3">
                          <strong>Product Status:</strong>
                          <span class="status-box status-<%= item.status.toLowerCase() %>">
                            <%= item.status %>
                          </span>
                        </p>
                      </div>
                    </div>
                    <div style="
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
              " class="col-md-2 text-center">
                      <% if (item.status !=='Cancelled' && item.status !=='Delivered' && item.status !=='Returned' &&
                        order.paymentStatus !=='Failed' ) { %>
                        <button class="btn cancel-order-btn" data-order-id="<%= order._id %>"
                          data-product-id="<%= item.productId._id %>">
                          Cancel Product
                        </button>
                        <% } else if (item.status==='Delivered' ) { %>
                          <% const returnRequest=order.returnRequests.find(req=>
                            req.productId.toString() === item.productId._id.toString()); %> <% if (returnRequest) { %>
                              <span class="status-box return-status-<%= returnRequest.status.toLowerCase() %>">Return
                                Status: <%= returnRequest.status %></span>
                              <% if (returnRequest.status==='Pending' ) { %>
                                <p class="return-message return-message-pending">
                                  Your request is being processed
                                </p>
                                <% } else if (returnRequest.status==='Approved' ) { %>
                                  <p class="return-message return-message-approved">
                                    Your request has been approved
                                  </p>
                                  <% } else if (returnRequest.status==='Rejected' ) { %>
                                    <p class="return-message return-message-rejected">
                                      Sorry, your request has been rejected (Not a valid reason for
                                      return, Contact us for further Queries)
                                    </p>
                                    <% } %>
                                      <% } else { %>
                                        <button class="btn return-order-btn" data-order-id="<%= order._id %>"
                                          data-product-id="<%= item.productId._id %>" data-bs-toggle="modal"
                                          data-bs-target="#returnReasonModal">
                                          Return Product
                                        </button>
                                        <% } %>
                                          <% } %>
                    </div>
            </div>
            <hr />
            <% }) %>
          </div>
        </div>
    </section>

    <!-- Return Reason Modal -->
    <div class="modal fade mt-5 pt-5" id="returnReasonModal" tabindex="-1" aria-labelledby="returnReasonModalLabel"
      aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="returnReasonModalLabel">
              Return Reason
            </h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <textarea id="returnReason" class="form-control" rows="3"
              placeholder="Please enter your reason for return..."></textarea>
            <div class="validation-message"></div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
              Close
            </button>
            <button type="button" id="submitReturn" class="btn btn-primary" disabled>
              Return Product
            </button>
          </div>
        </div>
      </div>
    </div>

    <%- include('partials/footer') %>

      <!-- Bootstrap JS and dependencies -->
      <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
      <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
      <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

      <script>
        // Handle cancellation of the product
        document.querySelectorAll(".cancel-order-btn").forEach((button) => {
          button.addEventListener("click", function (e) {
            e.preventDefault();
            const orderId = this.getAttribute("data-order-id");
            const productId = this.getAttribute("data-product-id");

            Swal.fire({
              title: "Are you sure?",
              text: "Once cancelled, you will not be able to recover this product!",
              icon: "warning",
              showCancelButton: true,
              confirmButtonColor: "#3085d6",
              cancelButtonColor: "#d33",
              confirmButtonText: "Yes, cancel it!",
            }).then((result) => {
              if (result.isConfirmed) {
                fetch(`/user/orders/cancel/${orderId}/${productId}`, {
                  method: "POST",
                })
                  .then((response) => response.json())
                  .then((data) => {
                    if (data.success) {
                      Swal.fire(
                        "Cancelled!",
                        "The product has been cancelled.",
                        "success"
                      ).then(() => {
                        location.reload();
                      });
                    } else {
                      Swal.fire(
                        "Error!",
                        data.message ||
                        "There was a problem cancelling the product.",
                        "error"
                      );
                    }
                  })
                  .catch((error) => {
                    console.error("Error:", error);
                    Swal.fire(
                      "Error!",
                      "There was a problem cancelling the product.",
                      "error"
                    );
                  });
              }
            });
          });
        });

        // Handle the return reason submission
        document
          .getElementById("submitReturn")
          .addEventListener("click", function () {
            const returnButton = document.querySelector(
              `button[data-bs-target="#returnReasonModal"]`
            );

            if (!returnButton) {
              console.error("Return button not found.");
              return;
            }

            const orderId = returnButton.getAttribute("data-order-id");
            const productId = returnButton.getAttribute("data-product-id");
            const returnReason = document.getElementById("returnReason").value;

            if (!returnReason) {
              Swal.fire("Error!", "Please provide a reason for return.", "error");
              return;
            }

            fetch(`/user/orders/return/${orderId}/${productId}`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                reason: returnReason,
              }),
            })
              .then((response) => {
                if (!response.ok) {
                  throw new Error("Network response was not ok");
                }
                return response.json();
              })
              .then((data) => {
                if (data.success) {
                  Swal.fire(
                    "Success!",
                    "Your return request has been submitted.",
                    "success"
                  ).then(() => {
                    location.reload(); // Refresh the page
                  });
                } else {
                  Swal.fire(
                    "Error!",
                    data.message ||
                    "There was a problem submitting your return request.",
                    "error"
                  );
                }
              })
              .catch((error) => {
                console.error("Error:", error);
                Swal.fire(
                  "Error!",
                  "There was a problem submitting your return request.",
                  "error"
                );
              });
          });

        // Real-time validation for return reason
        document
          .getElementById("returnReason")
          .addEventListener("input", function () {
            const returnReason = this.value.trim();
            const validationMessage = document.querySelector(
              ".validation-message"
            );
            const submitButton = document.getElementById("submitReturn");

            // Regular expression to check for special characters except comma
            const specialChars = /[!@#$%^&*()_+\-=\[\]{};':"\\|.<>?,]/;

            if (returnReason.length === 0) {
              this.classList.remove("is-valid", "is-invalid");
              validationMessage.textContent = "";
              validationMessage.classList.remove(
                "valid-feedback",
                "invalid-feedback"
              );
              submitButton.disabled = true;
            } else if (returnReason.length < 20) {
              this.classList.remove("is-valid");
              this.classList.add("is-invalid");
              validationMessage.textContent =
                "Reason must be at least 20 characters long.";
              validationMessage.classList.remove("valid-feedback");
              validationMessage.classList.add("invalid-feedback");
              submitButton.disabled = true;
            } else if (specialChars.test(returnReason)) {
              this.classList.remove("is-valid");
              this.classList.add("is-invalid");
              validationMessage.textContent =
                "Special characters are not allowed.";
              validationMessage.classList.remove("valid-feedback");
              validationMessage.classList.add("invalid-feedback");
              submitButton.disabled = true;
            } else if (
              returnReason.startsWith(" ") ||
              returnReason.endsWith(" ")
            ) {
              this.classList.remove("is-valid");
              this.classList.add("is-invalid");
              validationMessage.textContent =
                "Reason cannot start or end with spaces.";
              validationMessage.classList.remove("valid-feedback");
              validationMessage.classList.add("invalid-feedback");
              submitButton.disabled = true;
            } else if (/\d/.test(returnReason)) {
              this.classList.remove("is-valid");
              this.classList.add("is-invalid");
              validationMessage.textContent =
                "Numbers are not allowed in the reason.";
              validationMessage.classList.remove("valid-feedback");
              validationMessage.classList.add("invalid-feedback");
              submitButton.disabled = true;
            } else {
              this.classList.remove("is-invalid");
              this.classList.add("is-valid");
              validationMessage.textContent = "Looks Good.";
              validationMessage.classList.remove("invalid-feedback");
              validationMessage.classList.add("valid-feedback");
              submitButton.disabled = false;
            }
          });
      </script>
      <script>
        // Handle retrying payment
        document
          .getElementById("retryPaymentBtn")
          .addEventListener("click", async function (e) {
            e.preventDefault();
            const orderId = this.getAttribute("data-order-id");

            Swal.fire({
              title: "Are you sure?",
              text: "You are about to retry payment for this order!",
              icon: "warning",
              showCancelButton: true,
              confirmButtonColor: "#3085d6",
              cancelButtonColor: "#d33",
              confirmButtonText: "Yes, retry payment!",
            }).then(async (result) => {
              if (result.isConfirmed) {
                try {
                  // Create Razorpay order
                  const razorpayResponse = await fetch(
                    "/user/create-razorpay-order",
                    {
                      method: "POST",
                      headers: {
                        "Content-Type": "application/json",
                      },
                      body: JSON.stringify({
                        orderId,
                      }), // Send order ID
                    }
                  );

                  if (razorpayResponse.ok) {
                    const razorpayData = await razorpayResponse.json();
                    const options = {
                      key: "rzp_test_KZK1gW6B1A7B5s",
                      amount: razorpayData.amount,
                      currency: "INR",
                      name: "Subtlety",
                      description: "Order Payment",
                      order_id: razorpayData.id,
                      handler: async function (response) {
                        try {
                          // Confirm payment
                          const paymentConfirmationResponse = await fetch(
                            "/user/razorpay-confirm",
                            {
                              method: "POST",
                              headers: {
                                "Content-Type": "application/json",
                              },
                              body: JSON.stringify({
                                orderId,
                                paymentResponse: response,
                              }),
                            }
                          );

                          if (paymentConfirmationResponse.ok) {
                            const data = await paymentConfirmationResponse.json();
                            Swal.fire({
                              icon: "success",
                              title: "Success!",
                              text: data.message,
                              showConfirmButton: false,
                              timer: 1000,
                            }).then(() => {
                              window.location.href = `/user/order-success?orderId=${orderId}`;
                            });
                          } else {
                            const errorData =
                              await paymentConfirmationResponse.json();
                            await Swal.fire({
                              icon: "error",
                              title: "Oops...",
                              text: `Error confirming payment: ${errorData.message}`,
                            });
                          }
                        } catch (error) {
                          await Swal.fire({
                            icon: "error",
                            title: "Oops...",
                            text: "An unexpected error occurred while confirming the payment.",
                          });
                        }
                      },
                    };

                    const razorpay = new Razorpay(options);
                    razorpay.on("payment.failed", async (res) => {
                      await Swal.fire({
                        icon: "error",
                        title: "Payment Failed",
                        text: "Your payment didn't go through as it was declined by the bank. Try another payment method or contact your bank.",
                      });
                      window.location.href = "/user/home"; // Redirect after alert
                    });

                    // Open the Razorpay payment gateway
                    razorpay.open();
                  } else {
                    const errorData = await razorpayResponse.json();
                    await Swal.fire({
                      icon: "error",
                      title: "Oops...",
                      text: `Error creating Razorpay order: ${errorData.message}`,
                    });
                  }
                } catch (error) {
                  await Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "An unexpected error occurred.",
                  });
                }
              }
            });
          });
      </script>
</body>

</html>